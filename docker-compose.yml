# ┌────────────────────────────────────────────────────────────────────────┐
# │ 네트워크 정의: 모든 컨테이너가 동일 브리지 네트워크에 연결됩니다.        │
# └────────────────────────────────────────────────────────────────────────┘
networks:
  monitoring:
    driver: bridge

services:

  # ┌────────────────────────────────────────────────────────────────────────┐
  # │ 4) Kafka 서비스 정의                                                    │
  # │ - 메시지 브로커로 사용되며, 포트 9094로 외부와 통신합니다.               │
  # │ - 볼륨을 통해 로그 및 데이터를 영속화하며, 다양한 리스너를 설정합니다.    │
  # └────────────────────────────────────────────────────────────────────────┘
  kafka:
    image: public.ecr.aws/bitnami/kafka:3.5.1                    # Bitnami Kafka 3.5.1 이미지를 사용 :contentReference[oaicite:29]{index=29}
    container_name: hhplus-kafka                                 # 컨테이너 이름을 hhplus-kafka로 지정 :contentReference[oaicite:30]{index=30}
    ports:
      - "9094:9094"                                            # 호스트 9094 → 컨테이너 9094 :contentReference[oaicite:31]{index=31}                            # Kafka 데이터 영속화 볼륨 :contentReference[oaicite:32]{index=32}
    environment: # 환경 변수는 매핑(mapping) 형태로 작성 :contentReference[oaicite:33]{index=33}
      KAFKA_CFG_NODE_ID: 0                                       # Kafka 노드 ID 설정 :contentReference[oaicite:34]{index=34}
      KAFKA_CFG_PROCESS_ROLES: controller,broker                 # 프로세스 역할 설정 :contentReference[oaicite:35]{index=35}
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      # 리스너(프로토콜) 설정 :contentReference[oaicite:36]{index=36}
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      # 외부에 노출할 어드버타이즈드 리스너 :contentReference[oaicite:37]{index=37}
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      # 리스너별 프로토콜 맵핑 :contentReference[oaicite:38]{index=38}
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093            # 컨트롤러 쿼럼 투표자 설정 :contentReference[oaicite:39]{index=39}
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
    restart: always  # 컨트롤러 리스너 이름 지정 :contentReference[oaicite:40]{index=40}
    networks:
      - monitoring

  # ┌────────────────────────────────────────────────────────────────────────┐
  # │ 5) Redis 서비스 정의                                                    │
  # │ - 캐시 또는 세션 저장소로 사용되며, 포트 6379로 외부와 통신합니다.         │
  # │ - AOF(Append Only File) 모드를 활성화하여 데이터 영속성을 확보합니다.      │
  # └────────────────────────────────────────────────────────────────────────┘
  redis:
    image: redis:7.0-alpine                                      # Redis 7.0 Alpine 이미지를 사용 :contentReference[oaicite:41]{index=41}
    container_name: hhplus-redis                                  # 컨테이너 이름을 hhplus-redis로 지정 :contentReference[oaicite:42]{index=42}
    ports:
      - "6379:6379"                                            # 호스트 6379 → 컨테이너 6379 :contentReference[oaicite:43]{index=43}
    #    volumes:
    #      - ./data/redis/:/data                                    # 호스트 ./data/redis/ → 컨테이너 /data (영속화) :contentReference[oaicite:44]{index=44}
    command: [ "redis-server", "--appendonly", "yes" ]             # AOF 모드 활성화하여 영속성 확보 :contentReference[oaicite:45]{index=45}
    restart: unless-stopped                                      # 비정상 종료 시 자동 재시작 :contentReference[oaicite:46]{index=46}
    networks:
      - monitoring

  # ┌────────────────────────────────────────────────────────────────────────┐
  # │ 6) Spring Boot 애플리케이션 (app) 정의                                 │
  # │ - `Dockerfile`를 이용해 이미지를 빌드하며, 포트 8082로 외부와 통신합니다. │
  # │ - MySQL, Kafka, Redis, InfluxDB에 의존(depend on)하여 실행 순서를 보장합니다. │
  # │ - Spring Boot 환경 변수로 각 서비스 호스트를 지정합니다.                  │
  # └────────────────────────────────────────────────────────────────────────┘
  app:
    build:
      context: .                                               # 현재 디렉터리의 Dockerfile을 사용하여 이미지 빌드 :contentReference[oaicite:47]{index=47}
      dockerfile: Dockerfile
    image: hhplus-app                                           # 사용자 정의 이미지 이름을 hhplus-app으로 지정 :contentReference[oaicite:48]{index=48}
    depends_on:
      - kafka
      - redis
    #      - influxdb                                                # InfluxDB가 반드시 기동된 이후에 애플리케이션이 구동되도록 설정 :contentReference[oaicite:49]{index=49}
    environment: # Spring Boot 환경 변수는 매핑(mapping) 형태로 작성
      SPRING_PROFILES_ACTIVE: docker                           # 활성화 할 프로파일을 docker로 지정함.
    restart: always
    ports:
      - "8082:8082"                                             # 호스트 8082 → 컨테이너 8082 :contentReference[oaicite:62]{index=62}
    networks:
      - monitoring
    mem_limit: 1g        # Spring Boot 앱 JVM에 최대 1GB 할당
    cpus: 0.5            # CPU 코어 절반만 사용

